package org.mipams.jpegtrust.entities.validation;

public enum ValidationCode {

    CLAIM_SIGNATURE_VALIDATED("claimSignature.validated"),
    CLAIM_SIGNATURE_INSIDE_VALIDITY("claimSignature.insideValidity"),
    SIGNING_CREDENTIAL_TRUSTED("signingCredential.trusted"),
    SIGNING_CREDENTIAL_OCSP_NOT_REVOKED("signingCredential.ocsp.notRevoked"),
    TIME_STAMP_VALIDATED("timeStamp.validated"),
    TIME_STAMP_TRUSTED("timeStamp.trusted"),
    ASSERTION_HASHED_URI_MATCH("assertion.hashedURI.match"),
    ASSERTION_DATA_HASH_MATCH("assertion.dataHash.match"),
    ASSERTION_BMFF_HASH_MATCH("assertion.bmffHash.match"),
    ASSERTION_BOXES_HASH_MATCH("assertion.boxesHash.match"),
    ASSERTION_COLLECTION_HASH_MATCH("assertion.collectionHash.match"),
    ASSERTION_ACCESSIBLE("assertion.accessible"),
    INGREDIENT_MANIFEST_VALIDATED("ingredient.manifest.validated"),
    INGREDIENT_CLAIM_SIGNATURE_VALIDATED("ingredient.claimSignature.validated"),
    SIGNING_CREDENTIAL_OCSP_SKIPPED("signingCredential.ocsp.skipped"),
    SIGNING_CREDENTIAL_OCSP_INACCESSIBLE("signingCredential.ocsp.inaccessible"),
    TIME_STAMP_MISMATCH("timeStamp.mismatch"),
    TIME_STAMP_MALFORMED("timeStamp.malformed"),
    TIME_STAMP_OUTSIDE_VALIDITY("timeStamp.outsideValidity"),
    TIME_STAMP_UNTRUSTED("timeStamp.untrusted"),
    MANIFEST_UNKNOWN_PROVENANCE("manifest.unknownProvenance"),
    INGREDIENT_UNKNOWN_PROVENANCE("ingredient.unknownProvenance"),
    CLAIM_MISSING("claim.missing"),
    CLAIM_MULTIPLE("claim.multiple"),
    CLAIM_HARD_BINDINGS_MISSING("claim.hardBindings.missing"),
    CLAIM_CBOR_INVALID("claim.cbor.invalid"),
    CLAIM_CBOR_MALFORMED("claim.cbor.malformed"),
    CLAIM_SIGNATURE_MISSING("claimSignature.missing"),
    CLAIM_SIGNATURE_OUTSIDE_VALIDITY("claimSignature.outsideValidity"),
    CLAIM_SIGNATURE_MISMATCH("claimSignature.mismatch"),
    MANIFEST_MULTIPLE_PARENTS("manifest.multipleParents"),
    MANIFEST_TIMESTAMP_INVALID("manifest.timestamp.invalid"),
    MANIFEST_TIMESTAMP_WRONG_PARENTS("manifest.timestamp.wrongParents"),
    MANIFEST_UPDATE_INVALID("manifest.update.invalid"),
    MANIFEST_UPDATE_WRONG_PARENTS("manifest.update.wrongParents"),
    MANIFEST_INACCESSIBLE("manifest.inaccessible"),
    MANIFEST_COMPRESSED_INVALID("manifest.compressed.invalid"),
    MANIFEST_UNREFERENCED("manifest.unreferenced"),
    SIGNING_CREDENTIAL_UNTRUSTED("signingCredential.untrusted"),
    SIGNING_CREDENTIAL_INVALID("signingCredential.invalid"),
    SIGNING_CREDENTIAL_EXPIRED("signingCredential.expired"),
    SIGNING_CREDENTIAL_OCSP_REVOKED("signingCredential.ocsp.revoked"),
    SIGNING_CREDENTIAL_OCSP_UNKNOWN("signingCredential.ocsp.unknown"),
    ASSERTION_HASHED_URI_MISMATCH("assertion.hashedURI.mismatch"),
    ASSERTION_OUTSIDE_MANIFEST("assertion.outsideManifest"),
    ASSERTION_MISSING("assertion.missing"),
    ASSERTION_MULTIPLE_HARD_BINDINGS("assertion.multipleHardBindings"),
    ASSERTION_UNDECLARED("assertion.undeclared"),
    ASSERTION_INACCESSIBLE("assertion.inaccessible"),
    ASSERTION_NOT_REDACTED("assertion.notRedacted"),
    ASSERTION_SELF_REDACTED("assertion.selfRedacted"),
    ASSERTION_JSON_INVALID("assertion.json.invalid"),
    ASSERTION_CBOR_INVALID("assertion.cbor.invalid"),
    ASSERTION_ACTION_INGREDIENT_MISMATCH("assertion.action.ingredientMismatch"),
    ASSERTION_ACTION_MALFORMED("assertion.action.malformed"),
    ASSERTION_ACTION_REDACTED("assertion.action.redacted"),
    ASSERTION_ACTION_REDACTION_MISMATCH("assertion.action.redactionMismatch"),
    ASSERTION_DATA_HASH_MALFORMED("assertion.dataHash.malformed"),
    ASSERTION_DATA_HASH_MISMATCH("assertion.dataHash.mismatch"),
    ASSERTION_DATA_HASH_REDACTED("assertion.dataHash.redacted"),
    ASSERTION_BMFF_HASH_MALFORMED("assertion.bmffHash.malformed"),
    ASSERTION_BMFF_HASH_MISMATCH("assertion.bmffHash.mismatch"),
    ASSERTION_BOXES_HASH_MISMATCH("assertion.boxesHash.mismatch"),
    ASSERTION_BOXES_HASH_UNKNOWN_BOX("assertion.boxesHash.unknownBox"),
    ASSERTION_BOXES_HASH_UNKNOWN_BOXES("assertion.boxesHash.unknownBoxes"),
    ASSERTION_CLOUD_DATA_HARD_BINDING("assertion.cloud-data.hardBinding"),
    ASSERTION_CLOUD_DATA_ACTIONS("assertion.cloud-data.actions"),
    ASSERTION_CLOUD_DATA_MALFORMED("assertion.cloud-data.malformed"),
    ASSERTION_COLLECTION_HASH_MISMATCH("assertion.collectionHash.mismatch"),
    ASSERTION_COLLECTION_HASH_INCORRECT_FILE_COUNT("assertion.collectionHash.incorrectFileCount"),
    ASSERTION_COLLECTION_HASH_INVALID_URI("assertion.collectionHash.invalidURI"),
    ASSERTION_COLLECTION_HASH_MALFORMED("assertion.collectionHash.malformed"),
    ASSERTION_INGREDIENT_MALFORMED("assertion.ingredient.malformed"),
    ASSERTION_METADATA_DISALLOWED("assertion.metadata.disallowed"),
    INGREDIENT_MANIFEST_MISSING("ingredient.manifest.missing"),
    INGREDIENT_MANIFEST_MISMATCH("ingredient.manifest.mismatch"),
    INGREDIENT_CLAIM_SIGNATURE_MISSING("ingredient.claimSignature.missing"),
    INGREDIENT_CLAIM_SIGNATURE_MISMATCH("ingredient.claimSignature.mismatch"),
    ALGORITHM_UNSUPPORTED("algorithm.unsupported"),
    ALGORITHM_DEPRECATED("algorithm.deprecated"),
    HASHED_URI_MISSING("hashedURI.missing"),
    HASHED_URI_MISMATCH("hashedURI.mismatch"),
    GENERAL_ERROR("general.error"),
    CAWG_IDENTITY_TRUSTED("cawg.identity.trusted"),
    CAWG_IDENTITY_WELL_FORMED("cawg.identity.well-formed"),
    CAWG_IDENTITY_CBOR_INVALID("cawg.identity.cbor.invalid"),
    CAWG_IDENTITY_ASSERTION_MISMATCH("cawg.identity.assertion.mismatch"),
    CAWG_IDENTITY_ASSERTION_DUPLICATE("cawg.identity.assertion.duplicate"),
    CAWG_IDENTITY_CREDENTIAL_REVOKED("cawg.identity.credential_revoked"),
    CAWG_IDENTITY_HARD_BINDING_MISSING("cawg.identity.hard_binding_missing"),
    CAWG_IDENTITY_SIG_TYPE_UNKNOWN("cawg.identity.sig_type.unknown"),
    CAWG_IDENTITY_PAD_INVALID("cawg.identity.pad.invalid"),
    CAWG_IDENTITY_EXPECTED_PARTIAL_CLAIM_MISMATCH("cawg.identity.expected_partial_claim.mismatch"),
    CAWG_IDENTITY_EXPECTED_CLAIM_GENERATOR_MISMATCH("cawg.identity.expected_claim_generator.mismatch"),
    CAWG_IDENTITY_UNEXPECTED_COUNTERSIGNER("cawg.identity.unexpected_countersigner"),
    CAWG_IDENTITY_EXPECTED_COUNTERSIGNER_MISMATCH("cawg.identity.expected_countersigner.mismatch"),
    CAWG_IDENTITY_EXPECTED_COUNTERSIGNER_MISSING("cawg.identity.expected_countersigner.missing");

    private final String code;

    ValidationCode(String code) {
        this.code = code;
    }

    public String getCode() {
        return code;
    }
}